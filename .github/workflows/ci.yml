name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    steps:
      # 1) Clonar el repositorio
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Instalar Node
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # 3) Instalar dependencias (para ESLint y demás)
      - name: Install dependencies
        run: npm install

      # 4) Ejecutar ESLint
      - name: Run ESLint
        run: npm run lint

      # 5) Escaneo SAST con SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4.1.0
        with:
          args: >
            -Dsonar.projectKey=3Tenebris3_EOS-Front-End
            -Dsonar.organization=3tenebris3
            -Dsonar.sources=./src
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  dast-scan:
    runs-on: ubuntu-latest
    needs: build-and-analyze
    steps:
      # 1) Clonar el repositorio
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Construir la imagen personalizada de Nikto
      - name: Build Nikto image
        run: |
          echo "FROM perl:latest
          RUN apt-get update && apt-get install -y git libwww-perl libssl-dev
          RUN git clone https://github.com/sullo/nikto.git /opt/nikto
          WORKDIR /opt/nikto/program
          RUN chmod +x nikto.pl
          ENTRYPOINT [\"perl\", \"nikto.pl\"]" > Dockerfile.nikto
          docker build -t custom-nikto -f Dockerfile.nikto .

      # 3) Construir y ejecutar la aplicación en un contenedor
      - name: Build app image
        run: docker build -t eos-front-end-app .

      - name: Run app container
        run: docker run -d -p 8080:80 --name eos_front_end eos-front-end-app

      # 4) Escaneo Nikto
      - name: Nikto scan
        run: |
          docker run --rm \
            --link eos_front_end:target \
            -v $(pwd):/tmp \
            custom-nikto \
            -h http://target:80 \
            -output /tmp/nikto_report.html \
            -Format htm

      # 5) Subir el reporte como artefacto
      - name: Upload Nikto report
        uses: actions/upload-artifact@v3
        with:
          name: nikto-report
          path: nikto_report.html

      # 6) Detener y eliminar el contenedor
      - name: Stop and remove app container
        run: docker rm -f eos_front_end
